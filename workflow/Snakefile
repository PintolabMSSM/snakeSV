import os
import glob
import yaml
from snakemake.io import *

version="0.3"

###################################################################################################
## Check inputs
###################################################################################################
# Set snakemake main workdir variable. 
SNAKEDIR = os.path.dirname(workflow.snakefile) + "/"

if( "workdir" not in config ):
    print("No working directory defined on the configuration file.")
    print("Using current folder (please make sure paths for supporting files are reachable).")
    workdir: os.getcwd()
else:
	workdir: config["workdir"]

if( "OUT_FOLDER" not in config ):
    print("No output folder defined on the configuration file.")
    OUT_FOLDER = os.getcwd() + "/results_snakesv"
    print("Results will saved at:" + OUT_FOLDER)
else:
	OUT_FOLDER = config["OUT_FOLDER"]

if( "TMP_DIR" not in config ):
    TMP_DIR = "/tmp/"
else:
	TMP_DIR = config["TMP_DIR"]

if( "LIB_DIR" not in config ):
	LIB_DIR = SNAKEDIR + "../resources/"
else:
	LIB_DIR = SNAKEDIR + config["LIB_DIR"]

# Required files
if( "SAMPLE_KEY" not in config ):
    sys.exit("No samples defined on the configuration file")
if( "TOOLS" not in config ):
    sys.exit("No tools defined on the configuration file")
if( "REFERENCE_FASTA" not in config ):
    sys.exit("No reference fasta defined on the configuration file")
if( "REF_BUILD" not in config ):
    sys.exit("No reference build defined on the configuration file")

TOOLS = config["TOOLS"]
REFERENCE_FASTA = config["REFERENCE_FASTA"]
REF_BUILD = config["REF_BUILD"]

## Check sample key file
import ntpath, math, shutil, pandas

try:
	f_input_list = pandas.read_csv(config["SAMPLE_KEY"], sep='\t')
except:
	print("Check your input file.")
	raise

participant_id = f_input_list['participant_id'].tolist()
bam_path = f_input_list['bam']

###################################################################################################
onstart:
	import pprint
	# create dir for log on cluster mode
	shell("mkdir -p clusterlog/")
	print("")
	print("-----------------------------------------------------------------------------------------------------------")
	print("snakeSV Pipeline v%s by Ricardo A. Vialle (ricardovialle@gmail.com, https://github.com/RajLabMSSM/snakeSV)" % version)
	print("-----------------------------------------------------------------------------------------------------------")
	print("Parameters:")
	for k,v in sorted(config.items()):
		print(" - " + k + ": ", end='')
		pprint.pprint(v)
	print("-----------------------------------------------------------------------------------------------------------")
	if( "SV_PANEL" in config ):
		print("Custom SV panel is set. Variants from files below will be added for genotyping.")
		print(config["SV_PANEL"])
	print("-----------------------------------------------------------------------------------------------------------")
	print("")

def onend(msg, log):
	import os
	#Remove clusterlog folder (if exists and empty)
	shell('if [ -d "clusterlog/" ]; then if [ ! "$(ls -A clusterlog/)" ]; then rm -rf clusterlog/; fi; fi')
	shell('mkdir -p {OUT_FOLDER}/log')
	from datetime import datetime
	dtnow = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
	log_file = OUT_FOLDER + "/log/snakesv_" + dtnow + ".log"
	shell("cp {log} {log_file}")
	print("")
	print("-----------------------------------------------------------------------------------------------------------")
	print(msg)
	print("Please check the main log file for more information:")
	print("\t" + os.path.abspath(log_file))
	print("For a detailed running output report with execution time for each rule run againg with the flag --report")
	print("-----------------------------------------------------------------------------------------------------------")
	print("")

onsuccess:
	onend("snakeSV finished successfuly", log)

onerror:
	onend("An error has occured.", log)

###################################################################################################
## Rules
################################################################################################### 
include: "rules/preprocess.smk"
include: "rules/qc.smk"
include: "rules/other.smk"
include: "rules/genotype.smk"
include: "rules/annotation.smk"
include: "rules/benchmark.smk"

###################################################################################################
## SV discovery tools
###################################################################################################
# Include all selected tools
for tool in config["TOOLS"]:
	include: ("rules/tools/"+tool+".smk")

################################################################################################### 
## Final output
###################################################################################################
if( "GENCODE_GTF" or "ANNOTATION_BED" not in config ):
	final_output = OUT_FOLDER + "/merged_cohort/gt_merged.annot.vcf.gz.tbi"
else:
	final_output = OUT_FOLDER + "/merged_cohort/gt_merged.vcf.gz.tbi"

################################################################################################### 
rule all:
	input:
		OUT_FOLDER + "/qc/multiqc_report.html", ## Sample QC report
		final_output
################################################################################################### 
